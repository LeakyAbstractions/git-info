#!/bin/bash

#
# Extracts information from the GIT repository and generates a header file
#
# version   0.1.0.2
# author    Copyright (c) 2018 Guillermo Calvo
#
GENERATED_FILE=${1:-deps/git-info.h}

#
# Extract information
#
echo "Extracting info from GIT repository..."
GENERATION_DATE=`                   date -Iminute`
GIT_INFO_ORIGIN=`                   git remote get-url origin 2>/dev/null`
GIT_INFO_BRANCH=`                   git symbolic-ref --short HEAD 2>/dev/null`
GIT_INFO_HASH=`                     git log -1 --format=%H 2>/dev/null`
GIT_INFO_TAG=`                      git log -1 --format=%d 2>/dev/null | grep -oP '(?<=tag\: )(.+?)(?=[,\)])' | head -n1`
GIT_INFO_SUBJECT=`                  git log -1 --format=%s 2>/dev/null | tr "\42" "'" | tr "\134" "/"`
GIT_INFO_BODY=`                     git log -1 --format=%b 2>/dev/null | tr "\42" "'" | tr "\134" "/"`
GIT_INFO_NOTES=`                    git log -1 --format=%N 2>/dev/null | tr "\42" "'" | tr "\134" "/"`
GIT_INFO_AUTHOR_NAME=`              git log -1 --format=%an 2>/dev/null`
GIT_INFO_AUTHOR_EMAIL=`             git log -1 --format=%ae 2>/dev/null`
GIT_INFO_AUTHOR_TIMESTAMP=`         git log -1 --format=%at 2>/dev/null`
GIT_INFO_AUTHOR_DATE=`              git log -1 --format=%ai 2>/dev/null`
GIT_INFO_AUTHOR_DATE_RFC2822=`      git log -1 --format=%aD 2>/dev/null`
GIT_INFO_AUTHOR_DATE_ISO8601=`      git log -1 --format=%aI 2>/dev/null`
GIT_INFO_COMMITTER_NAME=`           git log -1 --format=%cn 2>/dev/null`
GIT_INFO_COMMITTER_EMAIL=`          git log -1 --format=%ce 2>/dev/null`
GIT_INFO_COMMITTER_TIMESTAMP=`      git log -1 --format=%ct 2>/dev/null`
GIT_INFO_COMMITTER_DATE=`           git log -1 --format=%ci 2>/dev/null`
GIT_INFO_COMMITTER_DATE_RFC2822=`   git log -1 --format=%cD 2>/dev/null`
GIT_INFO_COMMITTER_DATE_ISO8601=`   git log -1 --format=%cI 2>/dev/null`

# Handle 'detached HEAD' state
if [ -z "$GIT_INFO_BRANCH" ]; then
    echo "Detached HEAD state detected. Looking for branches matching HEAD..."
    # Try local branches
    GIT_INFO_BRANCH=`git show-ref 2>/dev/null | grep "$GIT_INFO_HASH" | grep -Po '(?<=refs/heads/)(.*)' | head -n 1`
    # Try origin branches
    [ -z "$GIT_INFO_BRANCH" ] && GIT_INFO_BRANCH=`git show-ref 2>/dev/null | grep "$GIT_INFO_HASH" | grep -Po '(?<=refs/remotes/origin/)(.*)' | head -n 1`
    # Try remote branches
    [ -z "$GIT_INFO_BRANCH" ] && [ -n "$GIT_INFO_ORIGIN" ] && GIT_INFO_BRANCH=`git ls-remote | grep '$GIT_INFO_HASH' | grep -Po '(?<=refs/heads/)(.*)' | head -n 1`
    if [ -z "$GIT_INFO_BRANCH" ]; then
        # No such branch; show the working tree status
        GIT_INFO_BRANCH=`git show -s --pretty=%d HEAD 2>/dev/null`
        [ -n "$GIT_INFO_BRANCH" ] && GIT_INFO_BRANCH="No branch$GIT_INFO_BRANCH"
    fi
fi

# Handle multiline fields
if [ -n "$GIT_INFO_BODY" ]; then
    GIT_INFO_BODY=`echo "$GIT_INFO_BODY" | sed -E 's/(.+)/    "\1\\\n" \\\/' | sed -Ez 's/(.*) \\\[\r\n]?/\1/' | tr -d '\r'`
fi
if [ -n "$GIT_INFO_NOTES" ]; then
    GIT_INFO_NOTES=`echo "$GIT_INFO_NOTES" | sed -E 's/(.+)/    "\1\\\n" \\\/' | sed -Ez 's/(.*) \\\[\r\n]?/\1/' | tr -d '\r'`
fi

#
# Generate file
#
echo "Generating file: $GENERATED_FILE"
mkdir -p `dirname $GENERATED_FILE`
cat > $GENERATED_FILE <<- EOF
#ifndef GIT_INFO_H
#define GIT_INFO_H

/*
 * This file was auto-generated on: $GENERATION_DATE
 * by: $0
 * DO NOT EDIT THIS FILE DIRECTLY
 */

#define GIT_INFO_ORIGIN                 "$GIT_INFO_ORIGIN"
#define GIT_INFO_BRANCH                 "$GIT_INFO_BRANCH"
#define GIT_INFO_HASH                   "$GIT_INFO_HASH"
#define GIT_INFO_TAG                    "$GIT_INFO_TAG"
#define GIT_INFO_SUBJECT                "$GIT_INFO_SUBJECT"
#define GIT_INFO_BODY                   \\
${GIT_INFO_BODY:-    `echo '""'`}
#define GIT_INFO_NOTES                  \\
${GIT_INFO_NOTES:-    `echo '""'`}
#define GIT_INFO_AUTHOR_NAME            "$GIT_INFO_AUTHOR_NAME"
#define GIT_INFO_AUTHOR_EMAIL           "$GIT_INFO_AUTHOR_EMAIL"
#define GIT_INFO_AUTHOR_TIMESTAMP       ${GIT_INFO_AUTHOR_TIMESTAMP:-0}
#define GIT_INFO_AUTHOR_DATE            "$GIT_INFO_AUTHOR_DATE"
#define GIT_INFO_AUTHOR_DATE_RFC2822    "$GIT_INFO_AUTHOR_DATE_RFC2822"
#define GIT_INFO_AUTHOR_DATE_ISO8601    "$GIT_INFO_AUTHOR_DATE_ISO8601"
#define GIT_INFO_COMMITTER_NAME         "$GIT_INFO_COMMITTER_NAME"
#define GIT_INFO_COMMITTER_EMAIL        "$GIT_INFO_COMMITTER_EMAIL"
#define GIT_INFO_COMMITTER_TIMESTAMP    ${GIT_INFO_COMMITTER_TIMESTAMP:-0}
#define GIT_INFO_COMMITTER_DATE         "$GIT_INFO_COMMITTER_DATE"
#define GIT_INFO_COMMITTER_DATE_RFC2822 "$GIT_INFO_COMMITTER_DATE_RFC2822"
#define GIT_INFO_COMMITTER_DATE_ISO8601 "$GIT_INFO_COMMITTER_DATE_ISO8601"

#endif
EOF

#
# Check generated file
#
if [ ! -f $GENERATED_FILE ]; then
    >&2 echo -e "\033[0;31mError: Could not generate $GENERATED_FILE\033[0m"
    exit 1;
fi

#
# Show info
#
echo -e "\033[1;34m"
echo "    GIT_INFO_ORIGIN:  $GIT_INFO_ORIGIN"
echo "    GIT_INFO_BRANCH:  $GIT_INFO_BRANCH"
echo "    GIT_INFO_HASH:    $GIT_INFO_HASH"
echo "    GIT_INFO_TAG:     $GIT_INFO_TAG"
echo "    GIT_INFO_SUBJECT: $GIT_INFO_SUBJECT"
echo -e "\033[0m"
